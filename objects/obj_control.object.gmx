<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_control</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialse variables
enum phases {
init,
draw,
income,
main,
battle,
main2,
endp,
};

enum types{
unit,
equip,
spell
}

enum turns {
init,
bTurn,
rTurn
};

//create the mouse
instance_create(mouse_x,mouse_y,obj_cursor);


//set variables for hand placement
hand1X = (cWidth*6)+20;
handRY = cHeight*3;

//create a random seed
randomize();

//give basic resourse values
turnCount = 0;

//create the players

rPlayer = instance_create(0,0, obj_player);
rPlayer.colour = "red";
bPlayer = instance_create(0,0, obj_player);
bPlayer.colour = "blue";

//get the deck id (change to player deck id)
deckId = 1;



//start game
global.turn =  turns.init;
global.phase = phases.init;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create array to hold the decks
bDeck[0] = noone;
bDeck[1] = noone;
bDeck[2] = noone;

rDeck[0] = noone;
rDeck[1] = noone;
rDeck[2] = noone;

//create an instance of a object, equip and spell deck for both colours
//place them in seperate arrays
for(i=0;i&lt;3;i=i+1){
if(i=0){
rDeck[i] = instance_create(cWidth*(fWidth+i),cHeight*(fHeight-1),obj_unitDeck)
}
if(i=1){
rDeck[i] = instance_create(cWidth*(fWidth+i),cHeight*(fHeight-1),obj_equipDeck)
}
if(i=2){
rDeck[i] = instance_create(cWidth*(fWidth+i),cHeight*(fHeight-1),obj_spellDeck)
}
rDeck[i].colour = "red";
rDeck[i].handX = hand1X+cWidth*i;
rDeck[i].handY = handRY;
}

for(i=0;i&lt;3;i=i+1){
if(i=0){
bDeck[i] = instance_create(cWidth*(fWidth+i),0,obj_unitDeck)
}
if(i=1){
bDeck[i] = instance_create(cWidth*(fWidth+i),0,obj_equipDeck)
}
if(i=2){
bDeck[i] = instance_create(cWidth*(fWidth+i),0,obj_spellDeck)
}
bDeck[i].colour = "blue";
bDeck[i].handX = hand1X+cWidth*i;
bDeck[i].handY = 0;
}


//give all red decks cards to use for testing
for(i=0; i&lt;3; i+=1){
//get all cards in the current deck
query = db_query_select_ids("tblUnitsInDeck");
db_cl_where(query,db_op_eq,"deckId",deckId);
idList = db_query_exec(query);
count = 0;
    for(a=0; a&lt;ds_list_size(idList); a+=1){
        cardInId = ds_list_find_value(idList,a);
        cardId = db_record_get("tblUnitsInDeck",cardInId,"cardId");
        cardQuan = db_record_get("tblUnitsInDeck",cardInId,"quantity");
        cardIndex = asset_get_index(db_record_get("tblUnits",cardId,"objName"));
        for(b=0; b&lt;cardQuan; b += 1){
            ds_list_add(rDeck[i].deckList,cardIndex);       
        }
        
    }

//ds_list_add(rDeck[i].deckList, obj_sabreTooth, obj_druidKing, obj_druidSummoner);
ds_list_shuffle(rDeck[i].deckList);
}


//give all blue decks cards for testing
for(i=0; i&lt;3; i+=1){
ds_list_add(bDeck[i].deckList, obj_sabreTooth, obj_druidKing, obj_druidSummoner);
ds_list_shuffle(bDeck[i].deckList);
}









</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create the buttons
btnNextTurn = instance_create((cWidth*9)+100, 850, obj_nextPhase);
btnEndTurn = instance_create((cWidth*9)+100, 925, obj_endTurn);
btnToMain = instance_create((cWidth*9)+100, 100, obj_btnToMain);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the game
if(global.turn == turns.init){
for(i=0; i&lt;3; i+=1){
scr_draw(i,rDeck);
scr_draw(i,bDeck);
}
//randomize the turn (for official release)
//turn = random_range(1,2);
global.turn = turns.rTurn;
global.phase = phases.draw
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do Red turn
if (global.turn = turns.rTurn){
switch(global.phase){
    case phases.draw: {
        scr_drawPhase(rDeck);
    }
    case phases.income: {
        scr_incomePhase(rPlayer);
    }
    case phases.main:{
        scr_mainPhase(rPlayer);
    }
    case phases.battle: {
        scr_battlePhase(rPlayer);
    }
    

}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
t = draw_text(1650,0,"Gold: " + string(bPlayer.gold));
draw_text(1650,0+string_height(t),"Life: " + string(bPlayer.life));
draw_text(1650,0+string_height(t)*2,"Mulligans: " + string(bPlayer.mul));
draw_text(1650,0+string_height(t)*3,"Extra Draw: " + string(bPlayer.exDraw));

if(global.turn=1){
t = draw_text(1800,0,"Turn: " + "Blue");
}else if(global.turn=2){
t = draw_text(1800,0,"Turn: " + "Red");
}



t = draw_text(1650,room_height-string_height(t),"Gold: " + string(rPlayer.gold));
draw_text(1650,room_height-string_height(t)*2,"Life: " + string(rPlayer.life));
draw_text(1650,room_height-string_height(t)*3,"Mulligans: " + string(rPlayer.mul));
draw_text(1650,room_height-string_height(t)*4,"Extra Draw: " + string(rPlayer.exDraw));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
